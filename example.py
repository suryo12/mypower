# import library
import os
import myPower.api as myp
import myPower.matpower_api as mp

# start octave session for myPower
oc = myp.oc_matpower()

# run power flow and get mypowercase
mypc = oc.runpf()
print(myp.pretty(mypc))

# # print in log
# myp.save_str(mypc)

# # save mypc
# myp.save_object(mypc,'mypc.pkl')

# # delete mypc
# del mypc

# # load mypc
# mypc = myp.load_object('mypc.pkl')

# get index
idx = myp.get_index()
print(myp.pretty(idx))

# # get gen_PG from mypc
# gen_PG = mypc['gen'][:,idx['PG']]
# print(myp.pretty(gen_PG))

# # gen_PG in pu
# baseMVA = mypc['baseMVA']
# gen_PG_pu = gen_PG / baseMVA
# print(gen_PG_pu)

# convert to mypc0 for Python combatibility
mypc0 = myp.to_mypc0(mypc)
print(mypc0['bus'][:,idx['BUS_I']])

# # revert to mypc for Octave compatibility
# mypc = myp.to_mypc(mypc0)
print(mypc['bus'][:,idx['BUS_I']])

# # get bus_slack
# for bus_slack,bus_BUS_TYPE in zip(mypc['bus'][:,idx['BUS_I']],mypc['bus'][:,idx['BUS_TYPE']]):
#     if bus_BUS_TYPE == idx['REF']:
#         bus_slack = int(bus_slack)
#         break
# print(bus_slack)

# # get gen_PG_slack (Power Generated by Slack Generator)
# gen_PG_slack = 0
# for row,val in enumerate(mypc['gen'][:,idx['GEN_BUS']]):
#     if val == bus_slack:
#         gen_PG_slack = gen_PG_slack + mypc['gen'][row,idx['PG']]
# print(gen_PG_slack)

# # get gen_PG_slack_dcpf (Power Generated by Slack in DCPF or no power losses)
# mpopt = oc.mpoption(model='DC')
# print(mpopt)
# mypc = oc.runpf('case9',mpopt)
# # print(mypc)
# gen_PG = mypc['gen'][:,idx['PG']]
# print(myp.pretty(gen_PG))

exit()

# # makeB_kron
# B_Kron,B0_Kron,B00_Kron,success = myp.makeB_kron()
# print(f'B_Kron = {B_Kron},\
#     \nB0_Kron = {B0_Kron},\
#     \nB00_Kron = {B00_Kron},\
#     \success = {success}')

## losses_kron_method
# gen_PG_pu = mypc['gen'][:,idx['PG']].tolist() # reference
# gen_PG_pu[gen_slack] = load_demand - PG_without_slack
# PL_kron,PL_Quadratic,PL_Linear,PL_Constant=losses_kron_method([B,B0,B00],ppc['baseMVA'],PG_Kron_ref)
# p

# if __name__=='__main__':
#     from init_myp import init_myp
#     from myp_pretty import myp_pretty
#     from print_log import print_log
#     oc = init_myp()

#     idx_bus_list=idx_bus(oc=oc)
#     print(idx_bus_list)

    # mypc = runpf(oc=oc)
    # print(myp_pretty(mypc))
    # print_log(mypc)
    
    # mpopt = mpoption('pf.alg', 'FDXB', 'pf.tol', 1e-4,oc=oc)
    # print(myp_pretty(mpopt))
    # print_log(mpopt)
    
    # mypc = runpf('case30',mpopt,oc=oc)
    # print(myp_pretty(mypc))
    # print_log(mypc)